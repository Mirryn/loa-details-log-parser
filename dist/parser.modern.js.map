{"version":3,"file":"parser.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10, float = false) {\n  if (typeof intString === \"number\") {\n    if (isNaN(intString)) return defaultValue;\n    return intString;\n  }\n\n  let intNum: number;\n\n  try {\n    intNum = float ? parseFloat(intString) : parseInt(intString, radix);\n    if (isNaN(intNum)) intNum = defaultValue;\n  } catch {\n    intNum = defaultValue;\n  }\n\n  return intNum;\n}\n","import { tryParseInt } from \"./util\";\n\nclass LogLine {\n  lineSplit: string[];\n  timestamp: Date;\n\n  constructor(lineSplit: string[]) {\n    this.lineSplit = lineSplit;\n    this.timestamp = new Date(this.lineSplit[1]);\n  }\n}\n\n// logId = 0\nexport class LogMessage extends LogLine {\n  message: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.message = this.lineSplit[2];\n  }\n}\n\n// logId = 1\nexport class LogInitEnv extends LogLine {\n  playerId: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.playerId = lineSplit[2];\n  }\n}\n\n// logId = 2\nexport class LogPhaseTransition extends LogLine {\n  phaseCode: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.phaseCode = tryParseInt(lineSplit[2]);\n  }\n}\n\n// logId = 3\nexport class LogNewPc extends LogLine {\n  id: string;\n  name: string;\n  classId: number;\n  class: string;\n  gearScore: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.classId = tryParseInt(lineSplit[4]);\n    this.class = lineSplit[5] || \"UnknownClass\";\n    /* this.level = tryParseInt(lineSplit[6]); */\n    this.gearScore = tryParseInt(lineSplit[7], 0, 10, true);\n    this.currentHp = tryParseInt(lineSplit[8]);\n    this.maxHp = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 4\nexport class LogNewNpc extends LogLine {\n  id: string;\n  npcId: number;\n  name: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.npcId = tryParseInt(lineSplit[3]);\n    this.name = lineSplit[4] || \"Unknown Entity\";\n    this.currentHp = tryParseInt(lineSplit[5]);\n    this.maxHp = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 5\nexport class LogDeath extends LogLine {\n  id: string;\n  name: string;\n  killerId: string;\n  killerName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.killerId = lineSplit[4];\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\n  }\n}\n\n// logId = 6\nexport class LogSkillStart extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n  }\n}\n\n// logId = 7\nexport class LogSkillStage extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n  skillStage: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillStage = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 8\nexport class LogDamage extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n  skillEffectId: number;\n  skillEffect: string;\n  targetId: string;\n  targetName: string;\n  damage: number;\n  damageModifier: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillEffectId = tryParseInt(lineSplit[6]);\n    this.skillEffect = lineSplit[7];\n    this.targetId = lineSplit[8];\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\n    this.damage = tryParseInt(lineSplit[10]);\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\n    this.currentHp = tryParseInt(lineSplit[12]);\n    this.maxHp = tryParseInt(lineSplit[13]);\n  }\n}\n\n// logId = 9\nexport class LogHeal extends LogLine {\n  id: string;\n  name: string;\n  healAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.healAmount = tryParseInt(lineSplit[4]);\n    //this.currentHp = tryParseInt(lineSplit[5]);\n  }\n}\n\n// logId = 10\nexport class LogBuff extends LogLine {\n  id: string;\n  name: string;\n  buffId: string;\n  buffName: string;\n  isNew: boolean;\n  sourceId: string;\n  sourceName: string;\n  shieldAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.buffId = lineSplit[4];\n    this.buffName = lineSplit[5];\n    this.isNew = lineSplit[6] == \"1\";\n    this.sourceId = lineSplit[7];\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\n    this.shieldAmount = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 11\nexport class LogCounterattack extends LogLine {\n  id: string;\n  name: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    /* this.targetId = lineSplit[4];\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\n  }\n}\n","interface HealingSkills {\n  [key: string]: HealingSkillDetails;\n}\ninterface HealingSkillDetails {\n  duration: number;\n}\nexport const healingSkills: HealingSkills = {\n  \"Serenade of Salvation\": {\n    duration: 3\n  },\n  \"Holy Aura\": {\n    duration: 16 * 1000\n  },\n  \"Holy Protection\": {\n    duration: 7 * 1000\n  },\n  Demonize: {\n    duration: 1.5 * 1000\n  }\n};\n\nexport enum HitOption {\n  HIT_OPTION_NONE = -1,\n  HIT_OPTION_BACK_ATTACK = 0,\n  HIT_OPTION_FRONTAL_ATTACK = 1,\n  HIT_OPTION_FLANK_ATTACK = 2,\n  HIT_OPTION_MAX = 3,\n}\n\nexport enum HitFlag {\n  HIT_FLAG_NORMAL = 0,\n  HIT_FLAG_CRITICAL = 1,\n  HIT_FLAG_MISS = 2,\n  HIT_FLAG_INVINCIBLE = 3,\n  HIT_FLAG_DOT = 4,\n  HIT_FLAG_IMMUNE = 5,\n  HIT_FLAG_IMMUNE_SILENCED = 6,\n  HIT_FLAG_FONT_SILENCED = 7,\n  HIT_FLAG_DOT_CRITICAL = 8,\n  HIT_FLAG_DODGE = 9,\n  HIT_FLAG_REFLECT = 10,\n  HIT_FLAG_DAMAGE_SHARE = 11,\n  HIT_FLAG_DODGE_HIT = 12,\n  HIT_FLAG_MAX = 13,\n}\n","import { cloneDeep } from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport * as LogLines from \"./log-lines\";\nimport { tryParseInt } from \"./util\";\nimport { healingSkills, HitFlag, HitOption } from \"./constants\";\n\ninterface Game {\n  startedOn: number;\n  lastCombatPacket: number;\n  fightStartedOn: number;\n  entities: { [name: string]: Entity };\n  damageStatistics: {\n    totalDamageDealt: number;\n    topDamageDealt: number;\n    totalDamageTaken: number;\n    topDamageTaken: number;\n    totalHealingDone: number;\n    topHealingDone: number;\n    totalShieldDone: number;\n    topShieldDone: number;\n  };\n}\ninterface HealSource {\n  source: string;\n  expires: number;\n}\n\ninterface Entity {\n  lastUpdate: number;\n  id: string;\n  npcId: number;\n  name: string;\n  class: string;\n  classId: number;\n  isPlayer: boolean;\n  isDead: boolean;\n  deaths: number;\n  deathTime: number;\n  gearScore: number;\n  currentHp: number;\n  maxHp: number;\n  damageDealt: number;\n  healingDone: number;\n  shieldDone: number;\n  damageTaken: number;\n  skills: { [name: string]: EntitySkills };\n  hits: Hits;\n}\n\ninterface Breakdown {\n  timestamp: number;\n  damage: number;\n  targetEntity: string;\n  isCrit: boolean;\n  isBackAttack: boolean;\n  isFrontAttack: boolean;\n}\n\ninterface EntitySkills {\n  id: number;\n  name: string;\n  totalDamage: number;\n  damageWithBa: number;\n  damageWithFa: number;\n  maxDamage: number;\n  hits: Hits;\n  breakdown: Breakdown[];\n}\n\nfunction createEntitySkill(): EntitySkills {\n  const newEntitySkill: EntitySkills = {\n    id: 0,\n    name: \"\",\n    totalDamage: 0,\n    damageWithBa: 0,\n    damageWithFa:0,\n    maxDamage: 0,\n    hits: {\n      casts: 0,\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    },\n    breakdown: []\n  };\n  return newEntitySkill;\n}\n\ninterface Hits {\n  casts: number;\n  total: number;\n  crit: number;\n  backAttack: number;\n  frontAttack: number;\n  counter: number;\n}\nfunction createEntity(): Entity {\n  const newEntity: Entity = {\n    lastUpdate: 0,\n    id: \"\",\n    npcId: 0,\n    name: \"\",\n    class: \"\",\n    classId: 0,\n    isPlayer: false,\n    isDead: false,\n    deaths: 0,\n    deathTime: 0,\n    gearScore: 0,\n    currentHp: 0,\n    maxHp: 0,\n    damageDealt: 0,\n    healingDone: 0,\n    shieldDone: 0,\n    damageTaken: 0,\n    skills: {},\n    hits: {\n      casts: 0,\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntity;\n}\n\nexport class LogParser extends EventEmitter {\n  resetTimer: ReturnType<typeof setTimeout>;\n\n  debugLines: boolean;\n  isLive: boolean;\n  dontResetOnZoneChange: boolean;\n  resetAfterPhaseTransition: boolean;\n  splitOnPhaseTransition: boolean;\n  removeOverkillDamage: boolean;\n\n  phaseTransitionResetRequest: boolean;\n  phaseTransitionResetRequestTime: number;\n\n  game: Game;\n  encounters: Game[];\n  healSources: HealSource[];\n\n  constructor(isLive = false) {\n    super();\n\n    this.resetTimer = null;\n\n    this.debugLines = false;\n    this.isLive = isLive;\n    this.dontResetOnZoneChange = false;\n    this.resetAfterPhaseTransition = false;\n    this.splitOnPhaseTransition = false;\n    this.removeOverkillDamage = true;\n\n    this.phaseTransitionResetRequest = false;\n    this.phaseTransitionResetRequestTime = 0;\n\n    this.resetState();\n    this.encounters = [];\n\n    if (this.isLive) {\n      setInterval(this.broadcastStateChange.bind(this), 100);\n    }\n  }\n\n  resetState() {\n    if (this.debugLines)\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: \"Resetting state\"\n      });\n\n    const clone = cloneDeep(this.game);\n    const curTime = +new Date();\n\n    this.game = {\n      startedOn: curTime,\n      lastCombatPacket: curTime,\n      fightStartedOn: 0,\n      entities: {},\n      damageStatistics: {\n        totalDamageDealt: 0,\n        topDamageDealt: 0,\n        totalDamageTaken: 0,\n        topDamageTaken: 0,\n        totalHealingDone: 0,\n        topHealingDone: 0,\n        totalShieldDone: 0,\n        topShieldDone: 0\n      }\n    };\n\n    this.healSources = [];\n    this.emit(\"reset-state\", clone);\n  }\n  softReset() {\n    this.resetTimer = null;\n    const entitiesCopy = cloneDeep(this.game.entities);\n    this.resetState();\n    for (const entity of Object.keys(entitiesCopy)) {\n      // don't keep entity if it hasn't been updated in 10 minutes\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\n        continue;\n\n      this.updateEntity(entitiesCopy[entity].name, {\n        name: entitiesCopy[entity].name,\n        npcId: entitiesCopy[entity].npcId,\n        class: entitiesCopy[entity].class,\n        classId: entitiesCopy[entity].classId,\n        isPlayer: entitiesCopy[entity].isPlayer,\n        gearScore: entitiesCopy[entity].gearScore,\n        maxHp: entitiesCopy[entity].maxHp,\n        currentHp: entitiesCopy[entity].currentHp\n      });\n    }\n  }\n  cancelReset() {\n    if (this.resetTimer) clearTimeout(this.resetTimer);\n    this.resetTimer = null;\n  }\n  splitEncounter() {\n    const curState = cloneDeep(this.game);\n    if (\n      curState.fightStartedOn != 0 && // no combat packets\n      (curState.damageStatistics.totalDamageDealt != 0 ||\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\n    )\n      this.encounters.push(curState);\n    this.resetState();\n  }\n\n  broadcastStateChange() {\n    const clone: Game = cloneDeep(this.game);\n    // Dont send breakdowns; will hang up UI\n    Object.values(clone.entities).forEach(entity => {\n      Object.values(entity.skills).forEach(skill => {\n        skill.breakdown = [];\n      })\n    })\n\n    this.emit(\"state-change\", clone);\n  }\n\n  parseLogLine(line: string) {\n    if (!line) return;\n\n    const lineSplit = line.trim().split(\"|\");\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\n\n    const logType = tryParseInt(lineSplit[0]);\n\n    try {\n      switch (logType) {\n        case 0:\n          this.onMessage(lineSplit);\n          break;\n        case 1:\n          this.onInitEnv(/* lineSplit */);\n          break;\n        case 2:\n          this.onPhaseTransition(lineSplit);\n          break;\n        case 3:\n          this.onNewPc(lineSplit);\n          break;\n        case 4:\n          this.onNewNpc(lineSplit);\n          break;\n        case 5:\n          this.onDeath(lineSplit);\n          break;\n        case 6:\n          this.onSkillStart(lineSplit);\n          break;\n        case 7:\n          this.onSkillStage(lineSplit);\n          break;\n        case 8:\n          this.onDamage(lineSplit);\n          break;\n        case 9:\n          this.onHeal(lineSplit);\n          break;\n        case 10:\n          this.onBuff(lineSplit);\n          break;\n        case 12:\n          this.onCounterattack(lineSplit);\n          break;\n      }\n    } catch (e) {\n      this.emit(\"log\", { type: \"error\", message: e });\n    }\n  }\n\n  updateEntity(entityName: string, values) {\n    const updateTime = { lastUpdate: +new Date() };\n    if (!(entityName in this.game.entities)) {\n      this.game.entities[entityName] = {\n        ...createEntity(),\n        ...values,\n        ...updateTime\n      };\n    } else {\n      this.game.entities[entityName] = {\n        ...this.game.entities[entityName],\n        ...values,\n        ...updateTime\n      };\n    }\n  }\n\n  // logId = 0\n  onMessage(lineSplit: string[]) {\n    const logLine = new LogLines.LogMessage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onMessage: ${logLine.message}`\n      });\n    }\n\n    if (!logLine.message.startsWith(\"Arguments:\")) {\n      this.emit(\"message\", logLine.message);\n    }\n  }\n\n  // logId = 1\n  onInitEnv(/* lineSplit: string[] */) {\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onInitEnv`\n      });\n    }\n\n    if (this.isLive) {\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\n        if (this.debugLines) {\n          this.emit(\"log\", {\n            type: \"debug\",\n            message: `Setting a reset timer`\n          });\n        }\n\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\n        this.emit(\"message\", \"new-zone\");\n      }\n    } else {\n      this.splitEncounter();\n      this.emit(\"message\", \"new-zone\");\n    }\n  }\n\n  // logId = 2\n  onPhaseTransition(lineSplit: string[]) {\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onPhaseTransition: ${logLine.phaseCode}`\n      });\n    }\n\n    if (this.isLive) {\n      this.emit(\n        \"message\",\n        `phase-transition-${logLine.phaseCode}`\n      );\n\n      if (this.resetAfterPhaseTransition) {\n        this.phaseTransitionResetRequest = true;\n        this.phaseTransitionResetRequestTime = +new Date();\n      }\n    }\n\n    if (!this.isLive && this.splitOnPhaseTransition) {\n      this.splitEncounter();\n    }\n  }\n\n  // logId = 3\n  onNewPc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewPc(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name,\n      class: logLine.class,\n      classId: logLine.classId,\n      isPlayer: true,\n      ...(logLine.gearScore &&\n        logLine.gearScore != 0 && { gearScore: logLine.gearScore }),\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 4\n  onNewNpc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewNpc(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name,\n      npcId: logLine.npcId,\n      isPlayer: false,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 5\n  onDeath(lineSplit: string[]) {\n    const logLine = new LogLines.LogDeath(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\n      });\n    }\n\n    const entity = this.game.entities[logLine.name];\n\n    let deaths = 0;\n    if (!entity) deaths = 1;\n    else if (entity.isDead) deaths = entity.deaths;\n    else deaths = entity.deaths + 1;\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: true,\n      deathTime: +logLine.timestamp,\n      deaths,\n    });\n  }\n\n  // logId = 6\n  onSkillStart(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStart(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\n      });\n    }\n\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\n      this.healSources.push({\n        source: logLine.name,\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: false\n    });\n\n    const entity = this.game.entities[logLine.name];\n    if (entity) {\n      entity.hits.casts += 1;\n\n      if (!(logLine.skillName in entity.skills)) {\n        entity.skills[logLine.skillName] = {\n          ...createEntitySkill(),\n          ...{ id: logLine.skillId, name: logLine.skillName }\n        };\n        entity.skills[logLine.skillName].hits.casts += 1;\n      }\n    }\n  }\n\n  // logId = 7\n  onSkillStage(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\n      });\n    }\n  }\n\n  // logId = 8\n  onDamage(lineSplit: string[]) {\n    if (lineSplit.length < 13) return;\n    const logLine = new LogLines.LogDamage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    if (\n      this.phaseTransitionResetRequest &&\n      this.phaseTransitionResetRequestTime > 0 &&\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\n    ) {\n      this.softReset();\n      this.phaseTransitionResetRequest = false;\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name\n    });\n\n    this.updateEntity(logLine.targetName, {\n      id: logLine.targetId,\n      name: logLine.targetName,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n\n    const damageOwner = this.game.entities[logLine.name];\n    const damageTarget = this.game.entities[logLine.targetName];\n\n    if (\n      !damageTarget.isPlayer &&\n      this.removeOverkillDamage &&\n      logLine.currentHp < 0\n    ) {\n      logLine.damage = logLine.damage + logLine.currentHp;\n    }\n\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\n        logLine.skillId = logLine.skillEffectId;\n        logLine.skillName = logLine.skillEffect;\n    }\n\n    if (!(logLine.skillName in damageOwner.skills)) {\n      damageOwner.skills[logLine.skillName] = {\n        ...createEntitySkill(),\n        ...{ id: logLine.skillId, name: logLine.skillName }\n      };\n    }\n\n    const hitFlag: HitFlag = logLine.damageModifier & 0xf;\n    const hitOption: HitOption = ((logLine.damageModifier >> 4) & 0x7) - 1;\n\n    // TODO: Keeping for now; Not sure if referring to damage share on Valtan G1 or something else\n    // TODO: Not sure if this is fixed in the logger\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\n\n    // Remove 'sync' bleeds on G1 Valtan\n    if (logLine.skillName === \"Bleed\" && hitFlag === HitFlag.HIT_FLAG_DAMAGE_SHARE) return;\n\n    const isCrit =\n      hitFlag === HitFlag.HIT_FLAG_CRITICAL ||\n      hitFlag === HitFlag.HIT_FLAG_DOT_CRITICAL;\n    const isBackAttack = hitOption === HitOption.HIT_OPTION_BACK_ATTACK;\n    const isFrontAttack = hitOption === HitOption.HIT_OPTION_FRONTAL_ATTACK;\n\n    const critCount = isCrit ? 1 : 0;\n    const backAttackCount = isBackAttack ? 1 : 0;\n    const frontAttackCount = isFrontAttack ? 1 : 0;\n\n    damageOwner.skills[logLine.skillName].totalDamage +=\n      logLine.damage;\n    if (\n      logLine.damage >\n      damageOwner.skills[logLine.skillName].maxDamage\n    )\n      damageOwner.skills[logLine.skillName].maxDamage =\n        logLine.damage;\n\n    damageOwner.damageDealt += logLine.damage;\n    damageTarget.damageTaken += logLine.damage;\n\n    if (logLine.skillName !== \"Bleed\") {\n      damageOwner.hits.total += 1;\n      damageOwner.hits.crit += critCount;\n      damageOwner.hits.backAttack += backAttackCount;\n      damageOwner.hits.frontAttack += frontAttackCount;\n\n      damageOwner.skills[logLine.skillName].hits.total += 1;\n      damageOwner.skills[logLine.skillName].hits.crit += critCount;\n      damageOwner.skills[logLine.skillName].hits.backAttack += backAttackCount;\n      damageOwner.skills[logLine.skillName].hits.frontAttack += frontAttackCount;\n\n      damageOwner.skills[logLine.skillName].damageWithBa +=\n        backAttackCount * logLine.damage;\n      damageOwner.skills[logLine.skillName].damageWithFa +=\n        frontAttackCount * logLine.damage;\n    }\n\n    if (damageOwner.isPlayer) {\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\n      this.game.damageStatistics.topDamageDealt = Math.max(\n        this.game.damageStatistics.topDamageDealt,\n        damageOwner.damageDealt\n      );\n\n      const breakdown: Breakdown = {\n        timestamp: +logLine.timestamp,\n        damage: logLine.damage,\n        targetEntity: damageTarget.id,\n        isCrit,\n        isBackAttack,\n        isFrontAttack,\n      }\n\n      damageOwner.skills[logLine.skillName].breakdown.push(breakdown);\n    }\n\n    if (damageTarget.isPlayer) {\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\n      this.game.damageStatistics.topDamageTaken = Math.max(\n        this.game.damageStatistics.topDamageTaken,\n        damageTarget.damageTaken\n      );\n    }\n\n    if (this.game.fightStartedOn === 0)\n      this.game.fightStartedOn = +logLine.timestamp;\n    this.game.lastCombatPacket = +logLine.timestamp;\n  }\n\n  // logId = 9\n  onHeal(lineSplit: string[]) {\n    const logLine = new LogLines.LogHeal(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\n      });\n    }\n\n    let sourceName = \"\";\n    for (const source of this.healSources) {\n      if (source.expires >= +logLine.timestamp) {\n        sourceName = source.source;\n        break;\n      }\n    }\n    if (!sourceName) return;\n\n    this.updateEntity(sourceName, {\n      name: sourceName\n    });\n\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\n\n    if (this.game.entities[sourceName].isPlayer) {\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\n      this.game.damageStatistics.topHealingDone = Math.max(\n        this.game.damageStatistics.topHealingDone,\n        this.game.entities[sourceName].healingDone\n      );\n    }\n  }\n\n  // logId = 10\n  onBuff(lineSplit: string[]) {\n    const logLine = new LogLines.LogBuff(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\n      });\n    }\n\n    if (logLine.shieldAmount && logLine.isNew) {\n      this.updateEntity(logLine.name, {\n        name: logLine.name\n      });\n\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\n\n      if (this.game.entities[logLine.name].isPlayer) {\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\n        this.game.damageStatistics.topShieldDone = Math.max(\n          this.game.damageStatistics.topShieldDone,\n          this.game.entities[logLine.name].shieldDone\n        );\n      }\n    }\n  }\n\n  // logId = 12\n  onCounterattack(lineSplit: string[]) {\n    const logLine = new LogLines.LogCounterattack(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    // TODO: Add skill name from logger\n    this.game.entities[logLine.name].hits.counter += 1;\n  }\n}\n"],"names":["tryParseInt","intString","defaultValue","radix","float","isNaN","intNum","parseFloat","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","Date","super","message","LogPhaseTransition","phaseCode","LogNewPc","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","npcId","LogDeath","killerId","killerName","LogSkillStart","skillId","skillName","skillStage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","healAmount","LogBuff","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitOption","HitFlag","EventEmitter","isLive","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","cloneDeep","startedOn","curTime","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","clone","softReset","Object","keys","entitiesCopy","entity","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","values","forEach","skills","skill","breakdown","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","updateTime","_extends","isDead","deaths","deathTime","damageDealt","healingDone","shieldDone","damageTaken","hits","casts","total","crit","backAttack","frontAttack","counter","logLine","LogLines.LogMessage","startsWith","setTimeout","LogLines","includes","source","expires","createEntitySkill","totalDamage","damageWithBa","damageWithFa","maxDamage","LogLines.LogSkillStage","damageOwner","damageTarget","hitFlag","hitOption","HIT_FLAG_DAMAGE_SHARE","isCrit","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","isBackAttack","HIT_OPTION_BACK_ATTACK","isFrontAttack","HIT_OPTION_FRONTAL_ATTACK","critCount","backAttackCount","frontAttackCount","Math","max","targetEntity"],"mappings":"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"}