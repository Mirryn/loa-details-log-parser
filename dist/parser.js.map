{"version":3,"file":"parser.js","sources":["../src/util.ts","../src/constants.ts","../src/log-lines.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10, float = false) {\n  if (typeof intString === \"number\") {\n    if (isNaN(intString)) return defaultValue;\n    return intString;\n  }\n\n  let intNum: number;\n\n  try {\n    intNum = float ? parseFloat(intString) : parseInt(intString, radix);\n    if (isNaN(intNum)) intNum = defaultValue;\n  } catch {\n    intNum = defaultValue;\n  }\n\n  return intNum;\n}\n","interface HealingSkills {\n  [key: string]: HealingSkillDetails;\n}\ninterface HealingSkillDetails {\n  duration: number;\n}\nexport const healingSkills: HealingSkills = {\n  \"Serenade of Salvation\": {\n    duration: 3\n  },\n  \"Holy Aura\": {\n    duration: 16 * 1000\n  },\n  \"Holy Protection\": {\n    duration: 7 * 1000\n  },\n  Demonize: {\n    duration: 1.5 * 1000\n  }\n};\n\nexport enum HitOption {\n  HIT_OPTION_NONE = -1,\n  HIT_OPTION_BACK_ATTACK = 0,\n  HIT_OPTION_FRONTAL_ATTACK = 1,\n  HIT_OPTION_FLANK_ATTACK = 2,\n  HIT_OPTION_MAX = 3,\n}\n\nexport enum HitFlag {\n  HIT_FLAG_NORMAL = 0,\n  HIT_FLAG_CRITICAL = 1,\n  HIT_FLAG_MISS = 2,\n  HIT_FLAG_INVINCIBLE = 3,\n  HIT_FLAG_DOT = 4,\n  HIT_FLAG_IMMUNE = 5,\n  HIT_FLAG_IMMUNE_SILENCED = 6,\n  HIT_FLAG_FONT_SILENCED = 7,\n  HIT_FLAG_DOT_CRITICAL = 8,\n  HIT_FLAG_DODGE = 9,\n  HIT_FLAG_REFLECT = 10,\n  HIT_FLAG_DAMAGE_SHARE = 11,\n  HIT_FLAG_DODGE_HIT = 12,\n  HIT_FLAG_MAX = 13,\n}\n","import { tryParseInt } from \"./util\";\n\nclass LogLine {\n  lineSplit: string[];\n  timestamp: Date;\n\n  constructor(lineSplit: string[]) {\n    this.lineSplit = lineSplit;\n    this.timestamp = new Date(this.lineSplit[1]);\n  }\n}\n\n// logId = 0\nexport class LogMessage extends LogLine {\n  message: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.message = this.lineSplit[2];\n  }\n}\n\n// logId = 1\nexport class LogInitEnv extends LogLine {\n  playerId: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.playerId = lineSplit[2];\n  }\n}\n\n// logId = 2\nexport class LogPhaseTransition extends LogLine {\n  phaseCode: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.phaseCode = tryParseInt(lineSplit[2]);\n  }\n}\n\n// logId = 3\nexport class LogNewPc extends LogLine {\n  id: string;\n  name: string;\n  classId: number;\n  class: string;\n  gearScore: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.classId = tryParseInt(lineSplit[4]);\n    this.class = lineSplit[5] || \"UnknownClass\";\n    /* this.level = tryParseInt(lineSplit[6]); */\n    this.gearScore = tryParseInt(lineSplit[7], 0, 10, true);\n    this.currentHp = tryParseInt(lineSplit[8]);\n    this.maxHp = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 4\nexport class LogNewNpc extends LogLine {\n  id: string;\n  npcId: number;\n  name: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.npcId = tryParseInt(lineSplit[3]);\n    this.name = lineSplit[4] || \"Unknown Entity\";\n    this.currentHp = tryParseInt(lineSplit[5]);\n    this.maxHp = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 5\nexport class LogDeath extends LogLine {\n  id: string;\n  name: string;\n  killerId: string;\n  killerName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.killerId = lineSplit[4];\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\n  }\n}\n\n// logId = 6\nexport class LogSkillStart extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n  }\n}\n\n// logId = 7\nexport class LogSkillStage extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n  skillStage: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillStage = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 8\nexport class LogDamage extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n  skillEffectId: number;\n  skillEffect: string;\n  targetId: string;\n  targetName: string;\n  damage: number;\n  damageModifier: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillEffectId = tryParseInt(lineSplit[6]);\n    this.skillEffect = lineSplit[7];\n    this.targetId = lineSplit[8];\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\n    this.damage = tryParseInt(lineSplit[10]);\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\n    this.currentHp = tryParseInt(lineSplit[12]);\n    this.maxHp = tryParseInt(lineSplit[13]);\n  }\n}\n\n// logId = 9\nexport class LogHeal extends LogLine {\n  id: string;\n  name: string;\n  healAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.healAmount = tryParseInt(lineSplit[4]);\n    //this.currentHp = tryParseInt(lineSplit[5]);\n  }\n}\n\n// logId = 10\nexport class LogBuff extends LogLine {\n  id: string;\n  name: string;\n  buffId: string;\n  buffName: string;\n  isNew: boolean;\n  sourceId: string;\n  sourceName: string;\n  shieldAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.buffId = lineSplit[4];\n    this.buffName = lineSplit[5];\n    this.isNew = lineSplit[6] == \"1\";\n    this.sourceId = lineSplit[7];\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\n    this.shieldAmount = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 11\nexport class LogCounterattack extends LogLine {\n  id: string;\n  name: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    /* this.targetId = lineSplit[4];\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\n  }\n}\n","import { cloneDeep } from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport * as LogLines from \"./log-lines\";\nimport { tryParseInt } from \"./util\";\nimport { healingSkills, HitFlag, HitOption } from \"./constants\";\n\ninterface Game {\n  startedOn: number;\n  lastCombatPacket: number;\n  fightStartedOn: number;\n  entities: { [name: string]: Entity };\n  damageStatistics: {\n    totalDamageDealt: number;\n    topDamageDealt: number;\n    totalDamageTaken: number;\n    topDamageTaken: number;\n    totalHealingDone: number;\n    topHealingDone: number;\n    totalShieldDone: number;\n    topShieldDone: number;\n  };\n}\ninterface HealSource {\n  source: string;\n  expires: number;\n}\n\ninterface Entity {\n  lastUpdate: number;\n  id: string;\n  npcId: number;\n  name: string;\n  class: string;\n  classId: number;\n  isPlayer: boolean;\n  isDead: boolean;\n  deaths: number;\n  deathTime: number;\n  gearScore: number;\n  currentHp: number;\n  maxHp: number;\n  damageDealt: number;\n  healingDone: number;\n  shieldDone: number;\n  damageTaken: number;\n  skills: { [name: string]: EntitySkills };\n  hits: Hits;\n}\n\ninterface Breakdown {\n  timestamp: number;\n  damage: number;\n  targetEntity: string;\n  isCrit: boolean;\n  isBackAttack: boolean;\n  isFrontAttack: boolean;\n}\n\ninterface EntitySkills {\n  id: number;\n  name: string;\n  totalDamage: number;\n  damageWithBa: number;\n  damageWithFa: number;\n  maxDamage: number;\n  hits: Hits;\n  breakdown: Breakdown[];\n}\n\nfunction createEntitySkill(): EntitySkills {\n  const newEntitySkill: EntitySkills = {\n    id: 0,\n    name: \"\",\n    totalDamage: 0,\n    damageWithBa: 0,\n    damageWithFa:0,\n    maxDamage: 0,\n    hits: {\n      casts: 0,\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    },\n    breakdown: []\n  };\n  return newEntitySkill;\n}\n\ninterface Hits {\n  casts: number;\n  total: number;\n  crit: number;\n  backAttack: number;\n  frontAttack: number;\n  counter: number;\n}\nfunction createEntity(): Entity {\n  const newEntity: Entity = {\n    lastUpdate: 0,\n    id: \"\",\n    npcId: 0,\n    name: \"\",\n    class: \"\",\n    classId: 0,\n    isPlayer: false,\n    isDead: false,\n    deaths: 0,\n    deathTime: 0,\n    gearScore: 0,\n    currentHp: 0,\n    maxHp: 0,\n    damageDealt: 0,\n    healingDone: 0,\n    shieldDone: 0,\n    damageTaken: 0,\n    skills: {},\n    hits: {\n      casts: 0,\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntity;\n}\n\nexport class LogParser extends EventEmitter {\n  resetTimer: ReturnType<typeof setTimeout>;\n\n  debugLines: boolean;\n  isLive: boolean;\n  dontResetOnZoneChange: boolean;\n  resetAfterPhaseTransition: boolean;\n  splitOnPhaseTransition: boolean;\n  removeOverkillDamage: boolean;\n\n  phaseTransitionResetRequest: boolean;\n  phaseTransitionResetRequestTime: number;\n\n  game: Game;\n  encounters: Game[];\n  healSources: HealSource[];\n\n  constructor(isLive = false) {\n    super();\n\n    this.resetTimer = null;\n\n    this.debugLines = false;\n    this.isLive = isLive;\n    this.dontResetOnZoneChange = false;\n    this.resetAfterPhaseTransition = false;\n    this.splitOnPhaseTransition = false;\n    this.removeOverkillDamage = true;\n\n    this.phaseTransitionResetRequest = false;\n    this.phaseTransitionResetRequestTime = 0;\n\n    this.resetState();\n    this.encounters = [];\n\n    if (this.isLive) {\n      setInterval(this.broadcastStateChange.bind(this), 100);\n    }\n  }\n\n  resetState() {\n    if (this.debugLines)\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: \"Resetting state\"\n      });\n\n    const clone = cloneDeep(this.game);\n    const curTime = +new Date();\n\n    this.game = {\n      startedOn: curTime,\n      lastCombatPacket: curTime,\n      fightStartedOn: 0,\n      entities: {},\n      damageStatistics: {\n        totalDamageDealt: 0,\n        topDamageDealt: 0,\n        totalDamageTaken: 0,\n        topDamageTaken: 0,\n        totalHealingDone: 0,\n        topHealingDone: 0,\n        totalShieldDone: 0,\n        topShieldDone: 0\n      }\n    };\n\n    this.healSources = [];\n    this.emit(\"reset-state\", clone);\n  }\n  softReset() {\n    this.resetTimer = null;\n    const entitiesCopy = cloneDeep(this.game.entities);\n    this.resetState();\n    for (const entity of Object.keys(entitiesCopy)) {\n      // don't keep entity if it hasn't been updated in 10 minutes\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\n        continue;\n\n      this.updateEntity(entitiesCopy[entity].name, {\n        name: entitiesCopy[entity].name,\n        npcId: entitiesCopy[entity].npcId,\n        class: entitiesCopy[entity].class,\n        classId: entitiesCopy[entity].classId,\n        isPlayer: entitiesCopy[entity].isPlayer,\n        gearScore: entitiesCopy[entity].gearScore,\n        maxHp: entitiesCopy[entity].maxHp,\n        currentHp: entitiesCopy[entity].currentHp\n      });\n    }\n  }\n  cancelReset() {\n    if (this.resetTimer) clearTimeout(this.resetTimer);\n    this.resetTimer = null;\n  }\n  splitEncounter() {\n    const curState = cloneDeep(this.game);\n    if (\n      curState.fightStartedOn != 0 && // no combat packets\n      (curState.damageStatistics.totalDamageDealt != 0 ||\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\n    )\n      this.encounters.push(curState);\n    this.resetState();\n  }\n\n  broadcastStateChange() {\n    const clone: Game = cloneDeep(this.game);\n    // Dont send breakdowns; will hang up UI\n    Object.values(clone.entities).forEach(entity => {\n      Object.values(entity.skills).forEach(skill => {\n        skill.breakdown = [];\n      })\n    })\n\n    this.emit(\"state-change\", clone);\n  }\n\n  parseLogLine(line: string) {\n    if (!line) return;\n\n    const lineSplit = line.trim().split(\"|\");\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\n\n    const logType = tryParseInt(lineSplit[0]);\n\n    try {\n      switch (logType) {\n        case 0:\n          this.onMessage(lineSplit);\n          break;\n        case 1:\n          this.onInitEnv(/* lineSplit */);\n          break;\n        case 2:\n          this.onPhaseTransition(lineSplit);\n          break;\n        case 3:\n          this.onNewPc(lineSplit);\n          break;\n        case 4:\n          this.onNewNpc(lineSplit);\n          break;\n        case 5:\n          this.onDeath(lineSplit);\n          break;\n        case 6:\n          this.onSkillStart(lineSplit);\n          break;\n        case 7:\n          this.onSkillStage(lineSplit);\n          break;\n        case 8:\n          this.onDamage(lineSplit);\n          break;\n        case 9:\n          this.onHeal(lineSplit);\n          break;\n        case 10:\n          this.onBuff(lineSplit);\n          break;\n        case 12:\n          this.onCounterattack(lineSplit);\n          break;\n      }\n    } catch (e) {\n      this.emit(\"log\", { type: \"error\", message: e });\n    }\n  }\n\n  updateEntity(entityName: string, values) {\n    const updateTime = { lastUpdate: +new Date() };\n    if (!(entityName in this.game.entities)) {\n      this.game.entities[entityName] = {\n        ...createEntity(),\n        ...values,\n        ...updateTime\n      };\n    } else {\n      this.game.entities[entityName] = {\n        ...this.game.entities[entityName],\n        ...values,\n        ...updateTime\n      };\n    }\n  }\n\n  // logId = 0\n  onMessage(lineSplit: string[]) {\n    const logLine = new LogLines.LogMessage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onMessage: ${logLine.message}`\n      });\n    }\n\n    if (!logLine.message.startsWith(\"Arguments:\")) {\n      this.emit(\"message\", logLine.message);\n    }\n  }\n\n  // logId = 1\n  onInitEnv(/* lineSplit: string[] */) {\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onInitEnv`\n      });\n    }\n\n    if (this.isLive) {\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\n        if (this.debugLines) {\n          this.emit(\"log\", {\n            type: \"debug\",\n            message: `Setting a reset timer`\n          });\n        }\n\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\n        this.emit(\"message\", \"new-zone\");\n      }\n    } else {\n      this.splitEncounter();\n      this.emit(\"message\", \"new-zone\");\n    }\n  }\n\n  // logId = 2\n  onPhaseTransition(lineSplit: string[]) {\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onPhaseTransition: ${logLine.phaseCode}`\n      });\n    }\n\n    if (this.isLive) {\n      this.emit(\n        \"message\",\n        `phase-transition-${logLine.phaseCode}`\n      );\n\n      if (this.resetAfterPhaseTransition) {\n        this.phaseTransitionResetRequest = true;\n        this.phaseTransitionResetRequestTime = +new Date();\n      }\n    }\n\n    if (!this.isLive && this.splitOnPhaseTransition) {\n      this.splitEncounter();\n    }\n  }\n\n  // logId = 3\n  onNewPc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewPc(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name,\n      class: logLine.class,\n      classId: logLine.classId,\n      isPlayer: true,\n      ...(logLine.gearScore &&\n        logLine.gearScore != 0 && { gearScore: logLine.gearScore }),\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 4\n  onNewNpc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewNpc(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name,\n      npcId: logLine.npcId,\n      isPlayer: false,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 5\n  onDeath(lineSplit: string[]) {\n    const logLine = new LogLines.LogDeath(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\n      });\n    }\n\n    const entity = this.game.entities[logLine.name];\n\n    let deaths = 0;\n    if (!entity) deaths = 1;\n    else if (entity.isDead) deaths = entity.deaths;\n    else deaths = entity.deaths + 1;\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: true,\n      deathTime: +logLine.timestamp,\n      deaths,\n    });\n  }\n\n  // logId = 6\n  onSkillStart(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStart(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\n      });\n    }\n\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\n      this.healSources.push({\n        source: logLine.name,\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: false\n    });\n\n    const entity = this.game.entities[logLine.name];\n    if (entity) {\n      entity.hits.casts += 1;\n\n      if (!(logLine.skillName in entity.skills)) {\n        entity.skills[logLine.skillName] = {\n          ...createEntitySkill(),\n          ...{ id: logLine.skillId, name: logLine.skillName }\n        };\n        entity.skills[logLine.skillName].hits.casts += 1;\n      }\n    }\n  }\n\n  // logId = 7\n  onSkillStage(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\n      });\n    }\n  }\n\n  // logId = 8\n  onDamage(lineSplit: string[]) {\n    if (lineSplit.length < 13) return;\n    const logLine = new LogLines.LogDamage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    if (\n      this.phaseTransitionResetRequest &&\n      this.phaseTransitionResetRequestTime > 0 &&\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\n    ) {\n      this.softReset();\n      this.phaseTransitionResetRequest = false;\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name\n    });\n\n    this.updateEntity(logLine.targetName, {\n      id: logLine.targetId,\n      name: logLine.targetName,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n\n    const damageOwner = this.game.entities[logLine.name];\n    const damageTarget = this.game.entities[logLine.targetName];\n\n    if (\n      !damageTarget.isPlayer &&\n      this.removeOverkillDamage &&\n      logLine.currentHp < 0\n    ) {\n      logLine.damage = logLine.damage + logLine.currentHp;\n    }\n\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\n        logLine.skillId = logLine.skillEffectId;\n        logLine.skillName = logLine.skillEffect;\n    }\n\n    if (!(logLine.skillName in damageOwner.skills)) {\n      damageOwner.skills[logLine.skillName] = {\n        ...createEntitySkill(),\n        ...{ id: logLine.skillId, name: logLine.skillName }\n      };\n    }\n\n    const hitFlag: HitFlag = logLine.damageModifier & 0xf;\n    const hitOption: HitOption = ((logLine.damageModifier >> 4) & 0x7) - 1;\n\n    // TODO: Keeping for now; Not sure if referring to damage share on Valtan G1 or something else\n    // TODO: Not sure if this is fixed in the logger\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\n\n    // Remove 'sync' bleeds on G1 Valtan\n    if (logLine.skillName === \"Bleed\" && hitFlag === HitFlag.HIT_FLAG_DAMAGE_SHARE) return;\n\n    const isCrit =\n      hitFlag === HitFlag.HIT_FLAG_CRITICAL ||\n      hitFlag === HitFlag.HIT_FLAG_DOT_CRITICAL;\n    const isBackAttack = hitOption === HitOption.HIT_OPTION_BACK_ATTACK;\n    const isFrontAttack = hitOption === HitOption.HIT_OPTION_FRONTAL_ATTACK;\n\n    const critCount = isCrit ? 1 : 0;\n    const backAttackCount = isBackAttack ? 1 : 0;\n    const frontAttackCount = isFrontAttack ? 1 : 0;\n\n    damageOwner.skills[logLine.skillName].totalDamage +=\n      logLine.damage;\n    if (\n      logLine.damage >\n      damageOwner.skills[logLine.skillName].maxDamage\n    )\n      damageOwner.skills[logLine.skillName].maxDamage =\n        logLine.damage;\n\n    damageOwner.damageDealt += logLine.damage;\n    damageTarget.damageTaken += logLine.damage;\n\n    if (logLine.skillName !== \"Bleed\") {\n      damageOwner.hits.total += 1;\n      damageOwner.hits.crit += critCount;\n      damageOwner.hits.backAttack += backAttackCount;\n      damageOwner.hits.frontAttack += frontAttackCount;\n\n      damageOwner.skills[logLine.skillName].hits.total += 1;\n      damageOwner.skills[logLine.skillName].hits.crit += critCount;\n      damageOwner.skills[logLine.skillName].hits.backAttack += backAttackCount;\n      damageOwner.skills[logLine.skillName].hits.frontAttack += frontAttackCount;\n\n      damageOwner.skills[logLine.skillName].damageWithBa +=\n        backAttackCount * logLine.damage;\n      damageOwner.skills[logLine.skillName].damageWithFa +=\n        frontAttackCount * logLine.damage;\n    }\n\n    if (damageOwner.isPlayer) {\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\n      this.game.damageStatistics.topDamageDealt = Math.max(\n        this.game.damageStatistics.topDamageDealt,\n        damageOwner.damageDealt\n      );\n\n      const breakdown: Breakdown = {\n        timestamp: +logLine.timestamp,\n        damage: logLine.damage,\n        targetEntity: damageTarget.id,\n        isCrit,\n        isBackAttack,\n        isFrontAttack,\n      }\n\n      damageOwner.skills[logLine.skillName].breakdown.push(breakdown);\n    }\n\n    if (damageTarget.isPlayer) {\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\n      this.game.damageStatistics.topDamageTaken = Math.max(\n        this.game.damageStatistics.topDamageTaken,\n        damageTarget.damageTaken\n      );\n    }\n\n    if (this.game.fightStartedOn === 0)\n      this.game.fightStartedOn = +logLine.timestamp;\n    this.game.lastCombatPacket = +logLine.timestamp;\n  }\n\n  // logId = 9\n  onHeal(lineSplit: string[]) {\n    const logLine = new LogLines.LogHeal(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\n      });\n    }\n\n    let sourceName = \"\";\n    for (const source of this.healSources) {\n      if (source.expires >= +logLine.timestamp) {\n        sourceName = source.source;\n        break;\n      }\n    }\n    if (!sourceName) return;\n\n    this.updateEntity(sourceName, {\n      name: sourceName\n    });\n\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\n\n    if (this.game.entities[sourceName].isPlayer) {\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\n      this.game.damageStatistics.topHealingDone = Math.max(\n        this.game.damageStatistics.topHealingDone,\n        this.game.entities[sourceName].healingDone\n      );\n    }\n  }\n\n  // logId = 10\n  onBuff(lineSplit: string[]) {\n    const logLine = new LogLines.LogBuff(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\n      });\n    }\n\n    if (logLine.shieldAmount && logLine.isNew) {\n      this.updateEntity(logLine.name, {\n        name: logLine.name\n      });\n\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\n\n      if (this.game.entities[logLine.name].isPlayer) {\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\n        this.game.damageStatistics.topShieldDone = Math.max(\n          this.game.damageStatistics.topShieldDone,\n          this.game.entities[logLine.name].shieldDone\n        );\n      }\n    }\n  }\n\n  // logId = 12\n  onCounterattack(lineSplit: string[]) {\n    const logLine = new LogLines.LogCounterattack(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    // TODO: Add skill name from logger\n    this.game.entities[logLine.name].hits.counter += 1;\n  }\n}\n"],"names":["tryParseInt","intString","defaultValue","radix","float","isNaN","intNum","parseFloat","parseInt","HitOption","lineSplit","this","timestamp","LogMessage","_LogLine","_this","call","message","_inheritsLoose","LogLine","LogPhaseTransition","_LogLine3","_this3","phaseCode","_LogLine4","LogNewPc","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","npcId","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_LogLine7","_this7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","LogDamage","_LogLine9","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","_LogLine10","_this10","healAmount","LogBuff","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_LogLine12","_this12","healingSkills","duration","Demonize","HitFlag","isLive","_EventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","clone","cloneDeep","curTime","Date","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","_proto","softReset","entitiesCopy","Object","keys","_i","_Object$keys","length","entity","lastUpdate","updateEntity","class","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","values","forEach","skills","skill","breakdown","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","_extends","isDead","deaths","deathTime","damageDealt","healingDone","shieldDone","damageTaken","hits","casts","total","crit","backAttack","frontAttack","counter","updateTime","logLine","LogLines.LogMessage","startsWith","setTimeout","LogLines","LogLines.LogDeath","includes","source","expires","createEntitySkill","totalDamage","damageWithBa","damageWithFa","maxDamage","LogLines.LogDamage","damageOwner","damageTarget","hitFlag","HIT_FLAG_DAMAGE_SHARE","isCrit","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","isBackAttack","hitOption","HIT_OPTION_BACK_ATTACK","HIT_OPTION_FRONTAL_ATTACK","frontAttackCount","isFrontAttack","critCount","backAttackCount","Math","max","targetEntity","LogLines.LogHeal","_step","_iterator","_createForOfIteratorHelperLoose","done","value","LogLines.LogBuff","LogLines.LogCounterattack","EventEmitter"],"mappings":"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"}